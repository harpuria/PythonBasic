# 컬렉션의 종류 : 리스트, 튜플, 딕셔너리, 셋

# 리스트 []
# 리스트의 특징은 요소의 변경이 가능하다는 것
l = ["홍길동", "김길동", "박길동"]
l2 = [10, 20, 35, 49, 90]
l3 = ["최길동", 30, 3.141592] # 서로 다른타입의 요소들을 하나의 리스트로 만들 수 있지만 권장하지 않음

# 리스트는 인덱스를 활용하여 특정 요소를 뽑아낼 수 있다
print(l[2])
l[2] = "윤길동"

# 슬라이싱도 가능
print(l[:2])

# del 키워드로 리스트 특정 요소 삭제
del l[1]
print(l)

# for 문으로 리스트 순회하기
for i in l:
    print(i, end=' ')

sum = 0
for i in l2:
    sum += i

print("\nl2 의 총합은 {}, 평균은 {} 입니다.".format(sum, sum / len(l2))) # len 으로 컬렉션 요소의 갯수를 알아낼 수 있다

# 리스트를 더하면 모든 요소가 하나의 리스트로 합쳐진 결과가 나온다
list_add = l + l2
print(list_add)

# 리스트를 곱하면 동일한 리스트의 요소를 n 번 반복한 결과가 나온다
list_mul = l * 3
print(list_mul)

# 2차원 리스트
l4 = [[1, 2, 3], [10, 20, 30]]
sum = 0
for i in l4:
    for k in i:
        sum += k
        print(k, end=' ')
print("\nl4 의 총합은 {} 입니다.".format(sum))

# 리스트 컴프리헨션 (중요!)
# 일정한 규칙을 가지는 요소라면 일일히 나열할 필요 없이 문법을 통해 리스트를 정의
# [수식 for 변수 in 리스트 if 조건]
l5 = [n for n in range(1, 11)]
print(l5)

l6 = [n for n in range(1, 11) if n % 2 == 0] # 1 부터 10 까지 짝수만 리스트의 요소로
print(l6)

# append(요소) - 리스트 마지막에 요소 추가
# insert(인덱스, 요소) - 특정 인덱스에 요소 추가
l7 = [1, 2, 3]
l7.append(444)
l7.insert(1, 555)
print(l7)

# extend(리스트) - 리스트를 확장하여 특정 리스트의 요소를 모두 추가
l8 = [4, 5, 6]
l7.extend(l8)
print(l7)

# 리스트 요소 삭제
# del 리스트[인덱스]
# remove(요소) - 특정 요소가 있으면 삭제, 없으면 예외. 같은 요소개 두 개 이상이면 먼저 발견된 요소 1개만 삭제
# clear() - 모든 리스트 요소 삭제
# pop() - 마지막 요소를 삭제하면서 반환
del l7[1]
print(l7)
l7.remove(444)
print(l7)
print(l7.pop())
print(l7)

# 리스트 요소 검색
# count(요소) - 특정 요소가 리스트 안에 몇개 있는지 반환
# index(요소) - 특정 요소가 있으면 인덱스를 반환, 없으면 에러
# 요소 in 리스트 - 요소가 있으면 True, 없으면 False
# 요소 not in 리스트 - 요소가 없으면 True, 있으면 False
l9 = [1, 3, 5, 7, 9, 11]
print(l9.count(5))
print(l9.index(3))
print(1 in l9)
print(3 not in l9)


# 리스트 정렬
# sort() - 오름차순 정렬
# reverse() - 내림차순 정렬
l10 = [45, 2, 3, 1, 99, 20, 289]
l10.sort()
print(l10)

l10.reverse()
print(l10)

print("=" * 50)

# 튜플 ()
# 튜플의 특징은 요소의 변경이 불가능하다는 것!
# 그렇기 때문에 변하지 않는 항목은 튜플을 사용하는 것이 안전하다.
# 괄호 없이 콤마로만 요소를 구분해줘도 자동으로 튜플로 저장된다
t = (1, 2, 3, 4, 5)
t2 = 6, 7, 8, 9, 10

# 튜플에서는 리스트에 비해 활용할 수 있는 메소드가 매우 적다.
# 왜냐하면 튜플은 한번 지정된 요소는 변경이나 삭제가 불가능하기 때문.
print(dir(t))
print(t.count(2))
print(t.index(5))